import useSWR from 'swr'
import Layout from '../components/layout'
import Upload from '../components/upload'
import * as format from '../utils/format'


const fetcher = (...args) => fetch(...args).then(res => res.json())

export default function Import() {

  const { data, error } = useSWR('/api/yield-transfer', fetcher)

  let yieldTransfers
  if (error) {
    yieldTransfers = <div className="text-center pt-4">Failed to load data!</div>
  }
  else if (!data) {
    yieldTransfers = <div className="text-center pt-4">Loading data…</div>
  }
  else if (Object.keys(data.transfers).length == 0) {
    yieldTransfers = <div className="text-center pt-4">No yield transfers imported</div>
  }
  else {
    yieldTransfers =
      Object.keys(data.transfers).map(asset =>
        Object.keys(data.transfers[asset]).map(account =>
          <table key={`${asset}-${account}`} className="w-full">
            <caption>{asset} — {account}</caption>
            <thead>
              <tr>
                <th>Completion date</th>
                <th className="text-right">Amount</th>
              </tr>
              {data.transfers[asset][account].map(transfer =>
                <tr key={transfer.completionDate}>
                  <td className="tabular-nums">{format.asDateTime(transfer.completionDate)}</td>
                  <td className="text-right tabular-nums">{format.asCurrency(transfer.amount, asset, { hideSymbol: true, crypto: true })}</td>
                </tr>
              )}
            </thead>
          </table>
        )
      )
  }

  return (
    <Layout name="Import">
      <div className="space-y-5">
        <div>
          <h2>Account Statement</h2>
          <p>Upload your account statement (can be generated in the SwissBorg app).</p>
          <Upload name="account-statement" url="/api/import-file" />
        </div>

        <div>
          <h2>Smart Yield Transfers</h2>
          <p>
            Smart Yield transfers (subscriptions & redemptions) are not made available in the account statement generated by SwissBorg.
            It is therefore necessary to add them seperately by uploading a separate Excel file.</p>
          <Upload name="yield-transfers" url="/api/import-file" />
        </div>

        <div>
          <h2>Imported Transfers</h2>
          <div className="grid grid-cols-3 gap-8">
            {yieldTransfers}
          </div>
        </div>
      </div>
    </Layout>
  )
}
